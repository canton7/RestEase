using System;
using System.Reflection;
using System.Reflection.Emit;
using System.Threading;
using RestEase.Implementation.Emission;

namespace RestEase.Implementation
{
    internal class EmitImplementationFactory
    {
        private static readonly string moduleBuilderName = "RestEaseAutoGeneratedModule";
        private readonly Emitter emitter;

        // Make sure this is an actual proper lazy singleton: we don't want to be instantiating it if
        // S.R.E is disabled e.g. because we're on iOS
        private static readonly Lazy<EmitImplementationFactory> lazyFactory = new(() => new(), LazyThreadSafetyMode.ExecutionAndPublication);
        public static EmitImplementationFactory Instance => lazyFactory.Value;

        private EmitImplementationFactory()
        {
            var assemblyName = new AssemblyName(RestClient.FactoryAssemblyName);
            var assemblyBuilder = AssemblyBuilder.DefineDynamicAssembly(assemblyName, AssemblyBuilderAccess.Run);

            var moduleBuilder = assemblyBuilder.DefineDynamicModule(moduleBuilderName);
            this.emitter = new Emitter(moduleBuilder);
        }

        public Type BuildEmitImplementation(Type interfaceType)
        {
            var analyzer = new ReflectionTypeAnalyzer(interfaceType);
            var typeModel = analyzer.Analyze();
            var diagnosticReporter = new DiagnosticReporter(typeModel);
            var generator = new ImplementationGenerator(typeModel, this.emitter, diagnosticReporter);
            return generator.Generate().Type;
        }
    }
}
